import React, { useState } from 'react';
import { Link } from 'react-router-dom';

const ChatbotSetup = () => {
  const [selectedPlatform, setSelectedPlatform] = useState('messenger');

  const features = [
    {
      icon: "ЁЯдЦ",
      title: "рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржЙрждрзНрждрж░",
      description: "рзирзк/рзн рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржХрж╛рж╕рзНржЯржорж╛рж░ рж░рзЗрж╕ржкржирзНрж╕"
    },
    {
      icon: "ЁЯТм",
      title: "рж╕рзНржорж╛рж░рзНржЯ ржХржерзЛржкржХржержи",
      description: "AI-ржЪрж╛рж▓рж┐ржд ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржХржерзЛржкржХржержи"
    },
    {
      icon: "ЁЯОп",
      title: "рж▓рж┐ржб ржЬрзЗржирж╛рж░рзЗрж╢ржи",
      description: "рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржХрж╛рж╕рзНржЯржорж╛рж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣"
    },
    {
      icon: "ЁЯУК",
      title: "ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
      description: "рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржЪрзНржпрж╛ржЯ рж░рж┐ржкрзЛрж░рзНржЯ"
    },
    {
      icon: "ЁЯФД",
      title: "ржорж╛рж▓рзНржЯрж┐-ржЪрзНржпрж╛ржирзЗрж▓ рж╕рж╛ржкрзЛрж░рзНржЯ",
      description: "рж╕ржм ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржПржХрж╕рж╛ржерзЗ ржХрж╛ржЬ ржХрж░рзЗ"
    },
    {
      icon: "ЁЯЪА",
      title: "ржжрзНрж░рзБржд ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржи",
      description: "рзз ржШржгрзНржЯрж╛ржпрж╝ рж╕ржорзНржкрзВрж░рзНржг рж╕рзЗржЯржЖржк"
    }
  ];

  const platforms = [
    {
      id: "messenger",
      name: "Facebook Messenger",
      icon: "ЁЯУШ",
      color: "bg-blue-500",
      features: ["ржЕржЯрзЛ рж░рж┐ржкрзНрж▓рж╛ржЗ", "ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ", "ржХрзБржЗржХ рж░рж┐ржкрзНрж▓рж╛ржЗ ржмрж╛ржЯржи", "ржорзЗржирзБ рж╕рзЗржЯржЖржк"]
    },
    {
      id: "whatsapp",
      name: "WhatsApp Business",
      icon: "ЁЯТЪ",
      color: "bg-green-500",
      features: ["ржмрж┐ржЬржирзЗрж╕ API", "ржЯрзЗржоржкрзНрж▓рзЗржЯ ржорзЗрж╕рзЗржЬ", "ржорж┐ржбрж┐ржпрж╝рж╛ рж╢рзЗржпрж╝рж╛рж░рж┐ржВ", "ржЧрзНрж░рзБржк ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ"]
    },
    {
      id: "website",
      name: "Website Chat Widget",
      icon: "ЁЯМР",
      color: "bg-purple-500",
      features: ["ржХрж╛рж╕рзНржЯржо ржбрж┐ржЬрж╛ржЗржи", "ржкржкржЖржк рж╕рзЗржЯрж┐ржВрж╕", "ржнрж┐ржЬрж┐ржЯрж░ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ", "ржлрж░рзНржо ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржи"]
    },
    {
      id: "instagram",
      name: "Instagram DM",
      icon: "ЁЯУ╕",
      color: "bg-pink-500",
      features: ["DM ржЕржЯрзЛржорзЗрж╢ржи", "рж╕рзНржЯрзЛрж░рж┐ рж░рж┐ржкрзНрж▓рж╛ржЗ", "ржХржорзЗржирзНржЯ рж░рзЗрж╕ржкржирзНрж╕", "рж▓рж┐ржб ржХрзНржпрж╛ржкржЪрж╛рж░"]
    }
  ];

  const chatbotTypes = [
    {
      type: "FAQ Bot",
      description: "рж╕рж╛ржзрж╛рж░ржг ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░",
      useCase: "ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ",
      icon: "тЭУ"
    },
    {
      type: "Lead Generation Bot",
      description: "ржХрж╛рж╕рзНржЯржорж╛рж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣",
      useCase: "рж╕рзЗрж▓рж╕ ржПржмржВ ржорж╛рж░рзНржХрзЗржЯрж┐ржВ",
      icon: "ЁЯОп"
    },
    {
      type: "Booking Bot",
      description: "ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ ржмрзБржХрж┐ржВ",
      useCase: "рж╕рж╛рж░рзНржнрж┐рж╕ ржмрж┐ржЬржирзЗрж╕",
      icon: "ЁЯУЕ"
    },
    {
      type: "E-commerce Bot",
      description: "ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж╕рж╛ржЬрзЗрж╢ржи ржУ ржЕрж░рзНржбрж╛рж░",
      useCase: "ржЕржирж▓рж╛ржЗржи рж╢ржк",
      icon: "ЁЯЫТ"
    }
  ];

  const packages = [
    {
      name: "рж╕рзНржЯрж╛рж░рзНржЯрж╛рж░",
      price: "рзл,рзжрзжрзж",
      duration: "ржУржпрж╝рж╛ржи-ржЯрж╛ржЗржо рж╕рзЗржЯржЖржк",
      features: [
        "рззржЯрж┐ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо рж╕рзЗржЯржЖржк",
        "ржмрзЗрж╕рж┐ржХ ржЕржЯрзЛ рж░рж┐ржкрзНрж▓рж╛ржЗ",
        "рзлржЯрж┐ ржкрж░рзНржпржирзНржд FAQ",
        "ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ",
        "рзн ржжрж┐ржи рж╕рж╛ржкрзЛрж░рзНржЯ"
      ]
    },
    {
      name: "ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓",
      price: "рззрзл,рзжрзжрзж",
      duration: "ржУржпрж╝рж╛ржи-ржЯрж╛ржЗржо рж╕рзЗржЯржЖржк",
      popular: true,
      features: [
        "рзиржЯрж┐ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо рж╕рзЗржЯржЖржк",
        "ржПржбржнрж╛ржирзНрж╕ AI ржЪрзНржпрж╛ржЯржмржЯ",
        "рзирзжржЯрж┐ ржкрж░рзНржпржирзНржд FAQ",
        "рж▓рж┐ржб ржЬрзЗржирж╛рж░рзЗрж╢ржи ржлрж░рзНржо",
        "ржХрж╛рж╕рзНржЯржо ржбрж┐ржЬрж╛ржЗржи",
        "ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
        "рзз ржорж╛рж╕ рж╕рж╛ржкрзЛрж░рзНржЯ"
      ]
    },
    {
      name: "ржПржирзНржЯрж╛рж░ржкрзНрж░рж╛ржЗржЬ",
      price: "рзйрзл,рзжрзжрзж",
      duration: "ржУржпрж╝рж╛ржи-ржЯрж╛ржЗржо рж╕рзЗржЯржЖржк",
      features: [
        "рж╕ржм ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо рж╕рзЗржЯржЖржк",
        "AI + NLP ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржи",
        "ржЖржирж▓рж┐ржорж┐ржЯрзЗржб FAQ",
        "ржорж╛рж▓рзНржЯрж┐-рж▓рзНржпрж╛ржЩрзНржЧрзБржпрж╝рзЗржЬ рж╕рж╛ржкрзЛрж░рзНржЯ",
        "CRM ржЗржирзНржЯрж┐ржЧрзНрж░рзЗрж╢ржи",
        "ржбрзЗржбрж┐ржХрзЗржЯрзЗржб ржорзНржпрж╛ржирзЗржЬрж╛рж░",
        "рзй ржорж╛рж╕ рж╕рж╛ржкрзЛрж░рзНржЯ"
      ]
    }
  ];

  const setupSteps = [
    {
      step: "рзз",
      title: "ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо ржирж┐рж░рзНржмрж╛ржЪржи",
      description: "ржХрзЛржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рж╛рждрзЗ ржЪрж╛ржи рждрж╛ ржмрзЗржЫрзЗ ржирж┐ржи"
    },
    {
      step: "рзи",
      title: "ржЪрзНржпрж╛ржЯржмржЯ ржЯрж╛ржЗржк рж╕рж┐рж▓рзЗржХрзНржЯ",
      description: "ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛рж░ ржЙржжрзНржжрзЗрж╢рзНржп ржЕржирзБржпрж╛ржпрж╝рзА ржмржЯ ржЯрж╛ржЗржк ржирж┐рж░рзНржзрж╛рж░ржг"
    },
    {
      step: "рзй",
      title: "ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи",
      description: "ржорзЗрж╕рзЗржЬ, FAQ ржПржмржВ рж░рзЗрж╕ржкржирзНрж╕ рж╕рзЗржЯржЖржк ржХрж░рзБржи"
    },
    {
      step: "рзк",
      title: "ржЯрзЗрж╕рзНржЯрж┐ржВ ржУ рж▓ржЮрзНржЪ",
      description: "ржЪрзНржпрж╛ржЯржмржЯ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзЗ рж▓рж╛ржЗржн ржХрж░рзБржи"
    }
  ];

  const chatbotFeatures = [
    {
      category: "ржорзЗрж╕рзЗржЬ ржЕржЯрзЛржорзЗрж╢ржи",
      items: ["ржУржпрж╝рзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ", "ржЕржЯрзЛ рж░рж┐ржкрзНрж▓рж╛ржЗ", "ржЕрзНржпрж╛ржУржпрж╝рзЗ ржорзЗрж╕рзЗржЬ", "ржлрж▓рзЛ-ржЖржк ржорзЗрж╕рзЗржЬ"]
    },
    {
      category: "ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрзНржЯрж┐ржн ржЙржкрж╛ржжрж╛ржи",
      items: ["ржХрзБржЗржХ рж░рж┐ржкрзНрж▓рж╛ржЗ ржмрж╛ржЯржи", "ржорзЗржирзБ ржмрж╛ржЯржи", "ржХрж╛рж░рж╛ржЙржЬрзЗрж▓ ржХрж╛рж░рзНржб", "ржлрж░рзНржо ржЗржиржкрзБржЯ"]
    },
    {
      category: "ржПржбржнрж╛ржирзНрж╕ ржлрж┐ржЪрж╛рж░",
      items: ["AI рж░рзЗрж╕ржкржирзНрж╕", "рж▓рзНржпрж╛ржЩрзНржЧрзБржпрж╝рзЗржЬ ржбрж┐ржЯрзЗржХрж╢ржи", "рж╕рзЗржирзНржЯрж┐ржорзЗржирзНржЯ ржПржирж╛рж▓рж╛ржЗрж╕рж┐рж╕", "рж▓рж╛ржЗржн ржПржЬрзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбржЕржл"]
    }
  ];

  const designShowcase = [
    {
      title: "ржорзЛржмрж╛ржЗрж▓-ржлрзНрж░рзЗржирзНржбрж▓рж┐ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕",
      description: "рж╕ржм ржбрж┐ржнрж╛ржЗрж╕рзЗ ржирж┐ржЦрзБржБржд ржкрзНрж░ржжрж░рзНрж╢ржи"
    },
    {
      title: "ржмрзНрж░рзНржпрж╛ржирзНржб ржХрж╛рж╕рзНржЯржорж╛ржЗржЬрзЗрж╢ржи",
      description: "ржЖржкржирж╛рж░ ржмрзНрж░рзНржпрж╛ржирзНржб ржХрж╛рж▓рж╛рж░ ржУ рж▓рзЛржЧрзЛ ржпрзБржХрзНржд ржХрж░рзБржи"
    },
    {
      title: "ржЗржорзЛржЬрж┐ ржУ GIF рж╕рж╛ржкрзЛрж░рзНржЯ",
      description: "ржПржиржЧрзЗржЬрж┐ржВ ржнрж┐ржЬрзБржпрж╝рж╛рж▓ ржХржирзНржЯрзЗржирзНржЯ"
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-20">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-5xl font-bold mb-6">
              ржЪрзНржпрж╛ржЯржмржЯ рж╕рзЗржЯржЖржк рж╕рж╛рж░рзНржнрж┐рж╕
            </h1>
            <p className="text-xl mb-8 text-blue-100">
              ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ржпрж╝ рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ ржжрж┐ржи AI-ржЪрж╛рж▓рж┐ржд рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ ржЪрзНржпрж╛ржЯржмржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗред 
              рж╕ржм ржкрзНрж░ржзрж╛ржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ рж╕ржорзНржкрзВрж░рзНржг рж╕рзЗржЯржЖржк ржУ ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржиред
            </p>
            <div className="flex justify-center gap-4">
              <Link
                to="/contact"
                className="bg-white text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-50 transition"
              >
                ржлрзНрж░рж┐ ржХржирж╕рж╛рж▓ржЯрзЗрж╢ржи
              </Link>
              <button className="border-2 border-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition">
                ржбрзЗржорзЛ ржжрзЗржЦрзБржи
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Features Grid */}
      <div className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold text-center mb-12 text-gray-800">
          ржЪрзНржпрж╛ржЯржмржЯ рж╕рзЗржЯржЖржкрзЗрж░ рж╕рзБржмрж┐ржзрж╛
        </h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <div
              key={index}
              className="bg-white p-6 rounded-xl shadow-lg hover:shadow-xl transition transform hover:-translate-y-1"
            >
              <div className="text-5xl mb-4">{feature.icon}</div>
              <h3 className="text-xl font-bold mb-3 text-gray-800">
                {feature.title}
              </h3>
              <p className="text-gray-600">{feature.description}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Platform Selection */}
      <div className="bg-gray-50 py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-4 text-gray-800">
            рж╕ржм ржкрзНрж░ржзрж╛ржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо рж╕рж╛ржкрзЛрж░рзНржЯ
          </h2>
          <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
            ржпрзЗржХрзЛржирзЛ ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржЯржмржЯ рж╕рзЗржЯржЖржк ржХрж░рзБржи - ржПржХржХ ржмрж╛ ржорж╛рж▓рзНржЯрж┐-ржЪрзНржпрж╛ржирзЗрж▓
          </p>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
            {platforms.map((platform) => (
              <div
                key={platform.id}
                onClick={() => setSelectedPlatform(platform.id)}
                className={`bg-white p-6 rounded-xl cursor-pointer border-4 transition transform hover:-translate-y-1 ${
                  selectedPlatform === platform.id
                    ? 'border-blue-500 shadow-xl'
                    : 'border-transparent shadow-md'
                }`}
              >
                <div className="text-center">
                  <div className="text-5xl mb-4">{platform.icon}</div>
                  <h3 className="font-bold text-lg mb-4 text-gray-800">
                    {platform.name}
                  </h3>
                  <ul className="text-sm text-gray-600 space-y-2">
                    {platform.features.map((feat, idx) => (
                      <li key={idx} className="flex items-center gap-2">
                        <span className="text-green-500">тЬУ</span>
                        {feat}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Chatbot Types */}
      <div className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold text-center mb-12 text-gray-800">
          ржЖржкржирж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржЪрзНржпрж╛ржЯржмржЯ ржЯрж╛ржЗржк
        </h2>
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
          {chatbotTypes.map((bot, index) => (
            <div
              key={index}
              className="bg-gradient-to-br from-blue-50 to-purple-50 p-6 rounded-xl border-2 border-blue-100 hover:border-blue-300 transition"
            >
              <div className="text-4xl mb-4">{bot.icon}</div>
              <h3 className="font-bold text-lg mb-2 text-gray-800">
                {bot.type}
              </h3>
              <p className="text-gray-600 text-sm mb-2">{bot.description}</p>
              <div className="text-xs bg-blue-100 text-blue-700 px-3 py-1 rounded-full inline-block">
                {bot.useCase}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Setup Process */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12 text-gray-800">
            рж╕рзЗржЯржЖржк ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛
          </h2>
          <div className="max-w-5xl mx-auto">
            <div className="grid md:grid-cols-4 gap-6">
              {setupSteps.map((item, index) => (
                <div key={index} className="relative">
                  <div className="bg-white p-6 rounded-xl shadow-lg text-center">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 text-white rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-4">
                      {item.step}
                    </div>
                    <h3 className="font-bold text-lg mb-3 text-gray-800">
                      {item.title}
                    </h3>
                    <p className="text-sm text-gray-600">{item.description}</p>
                  </div>
                  {index < setupSteps.length - 1 && (
                    <div className="hidden md:block absolute top-1/2 -right-3 transform -translate-y-1/2">
                      <div className="text-3xl text-blue-400">тЖТ</div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Chatbot Features Breakdown */}
      <div className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold text-center mb-12 text-gray-800">
          ржЪрзНржпрж╛ржЯржмржЯ ржлрж┐ржЪрж╛рж░ ржмрзНрж░рзЗржХржбрж╛ржЙржи
        </h2>
        <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
          {chatbotFeatures.map((feature, index) => (
            <div
              key={index}
              className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-blue-500"
            >
              <h3 className="font-bold text-xl mb-4 text-gray-800">
                {feature.category}
              </h3>
              <ul className="space-y-3">
                {feature.items.map((item, idx) => (
                  <li key={idx} className="flex items-center gap-3 text-gray-700">
                    <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                    {item}
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </div>

      {/* Design Showcase */}
      <div className="bg-gray-50 py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12 text-gray-800">
            UI ржбрж┐ржЬрж╛ржЗржи ржлрж┐ржЪрж╛рж░
          </h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
            {designShowcase.map((design, index) => (
              <div
                key={index}
                className="bg-gradient-to-br from-white to-blue-50 p-8 rounded-xl shadow-md text-center"
              >
                <div className="text-4xl mb-4">ЁЯОи</div>
                <h3 className="font-bold text-lg mb-2 text-gray-800">
                  {design.title}
                </h3>
                <p className="text-gray-600 text-sm">{design.description}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Pricing Packages */}
      <div className="container mx-auto px-4 py-16">
        <h2 className="text-4xl font-bold text-center mb-4 text-gray-800">
          рж╕рзЗржЯржЖржк ржкрзНржпрж╛ржХрзЗржЬ
        </h2>
        <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
          ржЖржкржирж╛рж░ ржмрж╛ржЬрзЗржЯ ржПржмржВ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржкрзНржпрж╛ржХрзЗржЬ ржмрзЗржЫрзЗ ржирж┐ржи
        </p>
        <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
          {packages.map((pkg, index) => (
            <div
              key={index}
              className={`relative bg-white rounded-xl shadow-xl overflow-hidden ${
                pkg.popular ? 'ring-4 ring-blue-500 transform scale-105' : ''
              }`}
            >
              {pkg.popular && (
                <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white text-center py-2 font-semibold">
                  ржЬржиржкрзНрж░рж┐ржпрж╝
                </div>
              )}
              <div className="p-8">
                <h3 className="text-2xl font-bold mb-2 text-gray-800">
                  {pkg.name}
                </h3>
                <div className="mb-4">
                  <span className="text-4xl font-bold text-blue-600">
                    рз│{pkg.price}
                  </span>
                  <span className="text-gray-500 text-sm ml-2">
                    {pkg.duration}
                  </span>
                </div>
                <ul className="space-y-3 mb-8">
                  {pkg.features.map((feature, idx) => (
                    <li key={idx} className="flex items-start gap-3">
                      <span className="text-green-500 mt-1">тЬУ</span>
                      <span className="text-gray-700">{feature}</span>
                    </li>
                  ))}
                </ul>
                <Link
                  to="/contact"
                  className={`block text-center py-3 rounded-lg font-semibold transition ${
                    pkg.popular
                      ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600'
                      : 'bg-gray-100 text-gray-800 hover:bg-gray-200'
                  }`}
                >
                  ржПржЦржиржЗ ржЕрж░рзНржбрж╛рж░ ржХрж░рзБржи
                </Link>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold mb-6">
            ржЖржЬржЗ рж╢рзБрж░рзБ ржХрж░рзБржи ржЖржкржирж╛рж░ ржЪрзНржпрж╛ржЯржмржЯ рж╕рзЗржЯржЖржк
          </h2>
          <p className="text-xl mb-8 text-blue-100 max-w-2xl mx-auto">
            ржлрзНрж░рж┐ ржХржирж╕рж╛рж▓ржЯрзЗрж╢ржи ржмрзБржХ ржХрж░рзБржи ржПржмржВ ржЬрзЗржирзЗ ржирж┐ржи ржХрзАржнрж╛ржмрзЗ ржЪрзНржпрж╛ржЯржмржЯ ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ ржмрж╛ржбрж╝рж╛рждрзЗ ржкрж╛рж░рзЗ
          </p>
          <div className="flex justify-center gap-4">
            <Link
              to="/contact"
              className="bg-white text-blue-600 px-8 py-4 rounded-lg font-semibold hover:bg-blue-50 transition text-lg"
            >
              ржлрзНрж░рж┐ ржХржирж╕рж╛рж▓ржЯрзЗрж╢ржи ржмрзБржХ ржХрж░рзБржи тЖТ
            </Link>
            <button className="border-2 border-white px-8 py-4 rounded-lg font-semibold hover:bg-white hover:text-blue-600 transition text-lg">
              рж╣рзЛржпрж╝рж╛ржЯрж╕ржЕрзНржпрж╛ржкрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatbotSetup;
